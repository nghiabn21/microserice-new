spring.application.name=order-service
server.port=8086

#spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.url= jdbc:sqlserver://localhost:1433;trustServerCertificate=true;databaseName=order
#spring.datasource.username=sa
#spring.datasource.password=anhnghia
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5433/manager_order
spring.datasource.username=admin
spring.datasource.password=admin
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto = create-drop

#logging.level.org.hibernate=DEBUG

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

application.config.customer-url=http://localhost:8090/api/v1/customers
application.config.product-url=http://localhost:8050/api/v1/products
application.config.payment-url=http://localhost:8060/api/v1/payments

#Resilinece4j Properties
#được sử dụng để giám sát và báo cáo trạng thái của các mạch cắt.
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
#số lượng sự kiện tối đa mà mạch cắt có thể xử lý trong một lần quét.
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#tính toán các chỉ số như tỷ lệ thất bại, số lượng cuộc gọi cho phép trong trạng thái bán mở, và thời gian chờ trong trạng thái mở.
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#số lượng các yêu cầu gần nhất mà mạch cắt sẽ xem xét khi tính toán các chỉ số như tỷ lệ thất bại.
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
#ỷ lệ phần trăm của các yêu cầu thất bại trong cửa sổ trượt được xem xét. Nếu tỷ lệ thất bại vượt quá ngưỡng này, mạch cắt sẽ mở
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#khoảng thời gian mà mạch cắt sẽ chờ trước khi chuyển từ trạng thái mở sang bán mở, sau khi trạng thái mở được kích hoạt.
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#số lượng cuộc gọi mà mạch cắt sẽ thực hiện trong trạng thái bán mở trước khi quyết định chuyển về trạng thái mở hoặc đóng
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
#true: mạch cắt sẽ tự động chuyển từ trạng thái mở sang bán mở sau khi thời gian chờ trong trạng thái mở kết thúc và số lượng cuộc gọi trong trạng thái bán mở đã được thực hiện đủ số lượng quy định.
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4J Timeout Properties -> Thời gian chờ tối đa cho mỗi lần gọi ví dụ như trong inventory đang test là 10s thì lỗi 500
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties -> Thời gian chờ mỗi lần cố thử gọi lại là 5s và tối đa 3 lần gọi lại
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
#management.tracing.sampling.probability=1.00

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.topic=notificationTopic
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.IntegerSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer