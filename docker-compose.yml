---
version: '3.7'
services:
  ## MySQL Docker Compose Config
  postgresql:
    container_name: postgresql
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
#      POSTGRES_MULTIPLE_DATABASES: manager_user,manager_product,manager_order
    volumes:
#      - ./create-databases.sh:/docker-entrypoint-initdb.d/create-databases.sh
      - postgresql:/var/lib/postgresql/data
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    ports:
      - "5433:5432"
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped

#  mongodb:
#    image: mongo
#    container_name: mongo_db
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongo:/data
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=alibou
#      - MONGO_INITDB_ROOT_PASSWORD=alibou
#
#  mongo-express:
#    image: mongo-express
#    container_name: mongo_express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=alibou
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=alibou
#      - ME_CONFIG_MONGODB_SERVER=mongodb

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"

networks:
  microservices-net:
    driver: bridge

volumes:
  postgresql:
  pgadmin:

  ## Zipkin
#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    ports:
#      - "9411:9411"

  ## Eureka Server
#  discovery-server:
#    image: microservices-tutorial/discovery-server:latest
#    container_name: discovery-server
#    ports:
#      - "8761:8761"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin

#  api-gateway:
#    image: microservices-tutorial/api-gateway:latest
#    container_name: api-gateway
#    ports:
#      - "8181:8080"
#    expose:
#      - "8181"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
#    depends_on:
#      - zipkin
#      - discovery-server
#      - keycloak

  ## Product-Service Docker Compose Config
#  product-service:
#    container_name: product-service
#    image: microservices-tutorial/product-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - mongo
#      - discovery-server
#      - api-gateway

  ## Order-Service Docker Compose Config
#  order-service:
#    container_name: order-service
#    image: microservices-tutorial/order-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
#    depends_on:
#      - postgres-order
#      - broker
#      - zipkin
#      - discovery-server
#      - api-gateway

  ## Inventory-Service Docker Compose Config
#  inventory-service:
#    container_name: inventory-service
#    image: microservices-tutorial/inventory-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
#    depends_on:
#      - postgres-inventory
#      - discovery-server
#      - api-gateway

  ## Notification-Service Docker Compose Config
#  notification-service:
#    container_name: notification-service
#    image: microservices-tutorial/notification-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#      - broker
#      - discovery-server
#      - api-gateway